API: torch.nn.functional
Bug Description: Bug on Bernoulli (using GPU)

Instructions:
1. Import `torch` and sub-modules needed for `torch.nn.functional` along with helpers for environment diagnostics.
2. Print Python, PyTorch and device details (including CUDA availability) to contextualise the run.
3. Fix random seeds on CPU and (if used) GPU to keep results deterministic.
4. Create minimal input tensors that satisfy shape and dtype requirements for the bug demonstration.
5. Move the tensors or model to **CUDA** to replicate the GPU code-path implicated in the bug.
6. Invoke `torch.nn.functional` exactly as in the full script; this call is expected to surface the issue described: bug on bernoulli (using gpu).
8. Enclose the critical section in `try/except` and print a labelled stack-trace to highlight the failure point.
9. Finish with an informative message indicating whether the run completed without uncaught errors.

Full Code:
#!/usr/bin/env python3
"""
Reproduction script for: Bug on Bernoulli (using GPU)
API under test: torch.nn.functional
"""

import torch
import sys, platform, traceback

# -- Environment diagnostics --
print('Platform  :', platform.platform())
print('Python    :', sys.version.split()[0])
print('PyTorch   :', torch.__version__)
print('CUDA avail:', torch.cuda.is_available())
if torch.cuda.is_available():
    print('CUDA ver  :', torch.version.cuda)
    print('Device    :', torch.cuda.get_device_name(0))

# -- Deterministic seeds for reproducibility --
torch.manual_seed(0)
if torch.cuda.is_available():
    torch.cuda.manual_seed_all(0)

# ---------- Original snippet begins (executed inside try/except) ----------
try:
    import torch
    import torch.nn.functional as F
    from torch.autograd import Variable

    a = F.sigmoid(torch.randn(10, 1))

    # This is OK
    a.bernoulli()

    # This is OK also
    b = a.cuda()
    b.bernoulli()

    # This is OK
    va = Variable(a)
    va.bernoulli()

    # This is a bug!
    vb = Variable(a).cuda()
    vb.bernoulli()
except Exception as e:
    print('\n[BUG TRIGGERED] Exception captured:')
    traceback.print_exc()
    sys.exit(1)

print('\n[FINISHED] Script completed without uncaught errors.')
