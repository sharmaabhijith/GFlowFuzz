[2025-05-20 13:01:58][INFO] Fuzzer initialized.
[2025-05-20 13:01:58][TRACE] SUTConfig: SUTConfig(language='c', path_documentation='config/documentation/c/c_std.md', path_example_code=None, trigger_to_generate_input='Please generate a correct and valid code following the given task instructions.', input_hint='#include <stdlib.h>', path_hand_written_prompt=None, SUT_string='', timeout=10, folder='fuzz_outputs', batch_size=1, temperature=0.8, max_length=1024, device='cuda', log_level='VERBOSE', template='fuzzing_with_config_file', lambda_hyper=0.1, beta1_hyper=1.0, special_eos=None, oracle_type='opt_and_qasm')
[2025-05-20 13:01:58][TRACE] FuzzerConfig: FuzzerConfig(number_of_iterations=10, total_time=1, log_level=1, resume=False, otf=False)
[2025-05-20 13:01:58][TRACE] CoderConfig: CoderConfig(system_message='You are an expert and advanced coding tool.', instruction='/* Please create a advanced C program following all the instructions closely. I need the code to have good coverage for testing compiler for potential discovery of bugs.*/', api_name='deepinfra', device='cuda', llm_config=LLMConfig(messages=[], max_tokens=1000, temperature=2, engine_name='meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8'))
[2025-05-20 13:01:58][TRACE] TrainerConfig: TrainerConfig(device='cuda', batch_size=1, sft_ckpt='checkpoint', train_steps=1000, grad_acc_steps=1, lr=0.0001, max_norm=1.0, num_warmup_steps=10, lora_r=8, lora_alpha=32, lora_dropout=0.1, buffer_size=100, prioritization=True)
[2025-05-20 13:01:58][TRACE] DistillerConfig: DistillerConfig(api_name='deepinfra', llm_config=LLMConfig(messages=[], max_tokens=500, temperature=2, engine_name='meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8'), system_message='You are an auto-prompting tool', instruction='Please summarize the documentation provided in a concise manner to describe the usage and functionality of the target')
[2025-05-20 13:01:58][INFO] Fuzzer training started.
[2025-05-20 13:01:58][TRACE] Generating initial prompt using distiller...
[2025-05-20 13:01:58][TRACE] Fuzzing iteration 0
[2025-05-20 13:03:08][TRACE] Writing instructions to file: ExpDump/gcc/Pipeline_test/20250520_130150/instruct_prompts/0.txt
[2025-05-20 13:03:16][TRACE] Generated code samples:
[2025-05-20 13:03:16][TRACE] Evaluating code sample:
[2025-05-20 13:03:16][INFO] Checkpoint saved at step 0
[2025-05-20 13:03:16][TRACE] Iteration 0 duration: 78.55s
[2025-05-20 13:03:16][TRACE] Fuzzing iteration 1
[2025-05-20 13:03:27][INFO] Error during training: CUDA out of memory. Tried to allocate 28.00 MiB. GPU 0 has a total capacity of 79.15 GiB of which 21.62 MiB is free. Including non-PyTorch memory, this process has 79.12 GiB memory in use. Of the allocated memory 77.80 GiB is allocated by PyTorch, and 848.52 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/home/GFlowFuzz/src/trainer/trainer.py", line 190, in train
    final_prompt, log_probs, log_zs = self.instructor.generate_instruction_sequence(self.prompt)
  File "/home/GFlowFuzz/src/instruct_LM/sampler.py", line 322, in generate_instruction_sequence
    instruction, log_prob, log_z = self.generate_instruction(
  File "/home/GFlowFuzz/src/instruct_LM/sampler.py", line 253, in generate_instruction
    outputs = self.model(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/peft/peft_model.py", line 1577, in forward
    return self.base_model(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/peft/tuners/tuners_utils.py", line 188, in forward
    return self.model.forward(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/transformers/models/llama/modeling_llama.py", line 831, in forward
    outputs = self.model(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/transformers/models/llama/modeling_llama.py", line 589, in forward
    layer_outputs = decoder_layer(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/transformers/models/llama/modeling_llama.py", line 348, in forward
    hidden_states = self.mlp(hidden_states)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/transformers/models/llama/modeling_llama.py", line 186, in forward
    down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/peft/tuners/lora/layer.py", line 556, in forward
    result = result + lora_B(lora_A(dropout(x))) * scaling
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/torch/nn/modules/linear.py", line 117, in forward
    return F.linear(input, self.weight, self.bias)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 28.00 MiB. GPU 0 has a total capacity of 79.15 GiB of which 21.62 MiB is free. Including non-PyTorch memory, this process has 79.12 GiB memory in use. Of the allocated memory 77.80 GiB is allocated by PyTorch, and 848.52 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)

