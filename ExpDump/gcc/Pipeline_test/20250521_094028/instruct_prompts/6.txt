INITIAL KNOWLEDGE: The C Standard Library headers provide essential functionalities for system interaction, data manipulation, and program control. Here's a concise breakdown:

**Core Utilities**  
- `<assert.h>`: Debugging via runtime assertions.  
- `<stdlib.h>`: Memory management, random numbers, string conversions.  
- `<stddef.h>`/`<stdarg.h>`: Common macros and variable argument handling.  
- `<limits.h>`/`<float.h>`: Integer and floating-point type limits.  

**I/O & String Handling**  
- `<stdio.h>`: Input/output operations (e.g., `printf`, `scanf`).  
- `<string.h>`: String manipulation (e.g., `strcpy`, `memcmp`).  

**Mathematics**  
- `<math.h>`: Basic math functions (e.g., `sin`, `sqrt`).  
- `<complex.h>` (C99): Complex number arithmetic.  
- `<tgmath.h>` (C99): Type-generic math macros.  

**Type Support**  
- `<stdint.h>` (C99)/`<inttypes.h>` (C99): Fixed-width integers and formatting.  
- `<stdbool.h>` (C99): Boolean type support.  
- `<wchar.h>` (C95)/`<uchar.h>` (C11): Wide/Unicode character handling.  

**Error & Environment**  
- `<errno.h>`: Error code macros.  
- `<fenv.h>` (C99): Floating-point environment control.  

**Concurrency & Atomicity**  
- `<stdatomic.h>` (C11)/`<threads.h>` (C11): Atomic operations and threading.  

**Miscellaneous**  
- `<time.h>`: Time/date utilities.  
- `<locale.h>`: Localization settings.  
- `<signal.h>`: Signal handling.  
- `<setjmp.h>`: Nonlocal jumps.  
- `<iso646.h>` (C95): Alternative operators (e.g., `&&` as `and`).  

**Recent Additions**  
- `<stdbit.h>` (C23)/`<stdckdint.h>` (C23): Bit manipulation and checked integer arithmetic.  

Headers marked with (C99/C11/C23) denote features introduced in later standards beyond ANSI C.
INSTRUCTIONS:
Implement a function that calculates the area and perimeter of a rectangle, utilizing `<math.h>` for calculations and `<stdio.h>` for user input and output, while also incorporating error handling using `<errno.h>` for potential invalid inputs.
Implement a C program that includes the necessary header files `<math.h>`, `<stdio.h>`, and `<errno.h>` to calculate the area and perimeter of a rectangle.
Implement a function that takes two parameters, length and width, and calculates the area of the rectangle using the formula area = length * width, while incorporating error handling to check for invalid input values such as negative numbers or non-numeric characters.
Implement a function that takes two parameters, length and width, and calculates the perimeter of the rectangle using the formula perimeter = 2 * (length + width), while handling potential arithmetic overflows and incorporating existing error handling for invalid input values.
Implement a main function that utilizes the previously defined area and perimeter calculation functions, while incorporating a loop to repeatedly prompt the user for input until valid numeric values are entered, and display the calculated results to the user through the console.
Implement a main function that repeatedly prompts the user for input values representing the length and width of a rectangle, calls the functions to calculate the area and perimeter, and displays the calculated results to the user through the console, while also incorporating error handling to handle invalid input values.
Implement a function that takes two parameters, length and width, and calculates the perimeter of the rectangle using the formula perimeter = 2 * (length + width), while handling potential arithmetic overflows and incorporating existing error handling for invalid input values.
Implement a function that takes two parameters, length and width, and calculates the area of the rectangle using the formula area = length * width, while incorporating error handling to check for invalid input values such as negative numbers or non-numeric characters, and returns the calculated area as a floating-point number.
Implement a function that takes two parameters, length and width, and calculates the area of the rectangle using the formula area = length * width, while incorporating error handling to check for invalid input values such as negative numbers or non-numeric characters, and returns the calculated area as a floating-point number.
Implement a main function that repeatedly prompts the user for input values representing the length and width of a rectangle, utilizing the previously defined area and perimeter calculation functions, while incorporating a conditional statement to check if the length is greater than or equal to the width before calculating and displaying the results to the user through the console.
TASK: Your task is to generate one short instruction at a time. Each instruction must be description of a specific requirement from the compiler description to be tested. Each instruction must add a new layer of incremental complexity to the existing description of requirements for the generation of C program.
NOTE: DO NOT generate any code. Instructions must be cohesive to guide the generation of single C program.