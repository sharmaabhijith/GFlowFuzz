INITIAL KNOWLEDGE: The C Standard Library headers provide essential functionalities for system interaction, data manipulation, and program control. Here's a concise breakdown:

**Core Utilities**  
- `<assert.h>`: Debugging via runtime assertions.  
- `<stdlib.h>`: Memory management, random numbers, string conversions.  
- `<stddef.h>`/`<stdarg.h>`: Common macros and variable argument handling.  
- `<limits.h>`/`<float.h>`: Integer and floating-point type limits.  

**I/O & String Handling**  
- `<stdio.h>`: Input/output operations (e.g., `printf`, `scanf`).  
- `<string.h>`: String manipulation (e.g., `strcpy`, `memcmp`).  

**Mathematics**  
- `<math.h>`: Basic math functions (e.g., `sin`, `sqrt`).  
- `<complex.h>` (C99): Complex number arithmetic.  
- `<tgmath.h>` (C99): Type-generic math macros.  

**Type Support**  
- `<stdint.h>` (C99)/`<inttypes.h>` (C99): Fixed-width integers and formatting.  
- `<stdbool.h>` (C99): Boolean type support.  
- `<wchar.h>` (C95)/`<uchar.h>` (C11): Wide/Unicode character handling.  

**Error & Environment**  
- `<errno.h>`: Error code macros.  
- `<fenv.h>` (C99): Floating-point environment control.  

**Concurrency & Atomicity**  
- `<stdatomic.h>` (C11)/`<threads.h>` (C11): Atomic operations and threading.  

**Miscellaneous**  
- `<time.h>`: Time/date utilities.  
- `<locale.h>`: Localization settings.  
- `<signal.h>`: Signal handling.  
- `<setjmp.h>`: Nonlocal jumps.  
- `<iso646.h>` (C95): Alternative operators (e.g., `&&` as `and`).  

**Recent Additions**  
- `<stdbit.h>` (C23)/`<stdckdint.h>` (C23): Bit manipulation and checked integer arithmetic.  

Headers marked with (C99/C11/C23) denote features introduced in later standards beyond ANSI C.
INSTRUCTIONS:
Implement a function that utilizes `<math.h>` to calculate the square root of a number input by the user through `<stdio.h>`, ensuring to handle potential errors with `<errno.h>`.
Implement a function that takes a single double-precision floating-point number as input and returns its square root, utilizing the sqrt function from the math.h library, while also incorporating error handling mechanisms from errno.h to catch and report potential errors such as negative input values.
Implement a function that checks if the input number is negative before calculating the square root, and if so, prints an error message indicating that the square root of a negative number is undefined, utilizing the errno and strerror functions from the errno.h library to report the error.
Implement a function that takes a single double-precision floating-point number as input and returns its square root, utilizing the sqrt function from the math.h library, while also incorporating error handling mechanisms from errno.h to catch and report potential errors such as negative input values.
Implement a function that calculates the square root of a user-input number, utilizing `<math.h>` for the calculation, `<stdio.h>` for user input, and `<errno.h>` to handle potential errors such as negative input values, and then extend the function to check if the input number is negative before calculating the square root, printing an error message that includes the error code and its corresponding description using `strerror` from `<string.h>` if the input is negative.
Implement a function that calculates the square root of a user-input number, utilizing `<math.h>` for the calculation, and extend the function to also check if the input number is negative before calculating the square root, utilizing `<stdio.h>` for user input.
Implement a function that takes a single double-precision floating-point number as input and returns its square root, utilizing the sqrt function from the math.h library.
Implement a function that calculates the square root of a user-input number, utilizing `<math.h>` for the calculation, and extend the function to also check if the input number is negative before calculating the square root, utilizing `<stdio.h>` for user input and `<errno.h>` to handle potential errors such as negative input values, then use `strerror` from `<string.h>` to include the error code and its corresponding description in the error message if the input is negative.
Implement a function that takes a single double-precision floating-point number as input and returns its square root, utilizing the sqrt function from the math.h library, while also incorporating error handling mechanisms to catch and report potential errors such as negative input values.
Implement a function that takes a single double-precision floating-point number as input and returns its square root, utilizing the sqrt function from the math.h library, while also incorporating error handling mechanisms from errno.h to catch and report potential errors such as negative input values, then use strerror from string.h to include the error code and its corresponding description in the error message if the input is negative, and finally, utilize stdio.h to handle user input.
TASK: Your task is to generate one short instruction at a time. Each instruction must be description of a specific requirement from the compiler description to be tested. Each instruction must add a new layer of incremental complexity to the existing description of requirements for the generation of C program.
NOTE: DO NOT generate any code. Instructions must be cohesive to guide the generation of single C program.