INITIAL KNOWLEDGE: The C Standard Library headers provide essential functionalities for system interaction, data manipulation, and program control. Here's a concise breakdown:

**Core Utilities**  
- `<assert.h>`: Debugging via runtime assertions.  
- `<stdlib.h>`: Memory management, random numbers, string conversions.  
- `<stddef.h>`/`<stdarg.h>`: Common macros and variable argument handling.  
- `<limits.h>`/`<float.h>`: Integer and floating-point type limits.  

**I/O & String Handling**  
- `<stdio.h>`: Input/output operations (e.g., `printf`, `scanf`).  
- `<string.h>`: String manipulation (e.g., `strcpy`, `memcmp`).  

**Mathematics**  
- `<math.h>`: Basic math functions (e.g., `sin`, `sqrt`).  
- `<complex.h>` (C99): Complex number arithmetic.  
- `<tgmath.h>` (C99): Type-generic math macros.  

**Type Support**  
- `<stdint.h>` (C99)/`<inttypes.h>` (C99): Fixed-width integers and formatting.  
- `<stdbool.h>` (C99): Boolean type support.  
- `<wchar.h>` (C95)/`<uchar.h>` (C11): Wide/Unicode character handling.  

**Error & Environment**  
- `<errno.h>`: Error code macros.  
- `<fenv.h>` (C99): Floating-point environment control.  

**Concurrency & Atomicity**  
- `<stdatomic.h>` (C11)/`<threads.h>` (C11): Atomic operations and threading.  

**Miscellaneous**  
- `<time.h>`: Time/date utilities.  
- `<locale.h>`: Localization settings.  
- `<signal.h>`: Signal handling.  
- `<setjmp.h>`: Nonlocal jumps.  
- `<iso646.h>` (C95): Alternative operators (e.g., `&&` as `and`).  

**Recent Additions**  
- `<stdbit.h>` (C23)/`<stdckdint.h>` (C23): Bit manipulation and checked integer arithmetic.  

Headers marked with (C99/C11/C23) denote features introduced in later standards beyond ANSI C.
INSTRUCTIONS:
Create a program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions.
Create a C program that includes the `<assert.h>` header file to utilize runtime assertions for debugging purposes.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions, and use the `assert` macro from `<assert.h>` to verify a condition at runtime.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, and uses the `malloc` function from `<stdlib.h>` to dynamically allocate memory for an integer variable, while also utilizing the `assert` macro to verify that the memory allocation was successful.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, and uses the `malloc` function from `<stdlib.h>` to dynamically allocate memory for an integer variable, while also utilizing the `assert` macro to verify that the memory allocation was successful and then assigns a value to the allocated memory location.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, and uses the `malloc` function from `<stdlib.h>` to dynamically allocate memory for an integer variable, while also utilizing the `assert` macro to verify that the memory allocation was successful, assigns a value to the allocated memory location, and then frees the allocated memory using the `free` function from `<stdlib.h>`.
Create a program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions.
Create a C program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions, and uses the `malloc` function from `<stdlib.h>` to dynamically allocate memory for an integer variable, while also utilizing the `assert` macro to verify that the memory allocation was successful, assigns a value to the allocated memory location, and then frees the allocated memory using the `free` function from `<stdlib.h>`, and finally, use the `exit` function from `<stdlib.h>` to terminate the program with a success status.
Create a program that includes the necessary header files for core utilities, specifically `<assert.h>` and `<stdlib.h>`, to utilize runtime assertions and memory management functions.
TASK: Your task is to generate one short instruction at a time. Each instruction must be high level description of a specific requirement from the compiler description to be tested. Each instruction must add a new layer of incremental complexity to the existing description of requirements. In the end all the instructions will be combined to generate a complete C program by the Coder LM.
NOTE: DO NOT generate any code. DO NOT ask any questions. DO NOT generate thinking step